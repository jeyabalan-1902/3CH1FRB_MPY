esphome:
  name: 3l1f
  friendly_name: 3L1F

  on_boot:
    priority: 600
    then:
      - lambda: |-
          // Restore light states
          id(light1).publish_state(id(light1_state));
          id(light2).publish_state(id(light2_state));
          id(light3).publish_state(id(light3_state));

          // Restore fan state
          if (id(fan_speed) > 0) {
            auto call = id(master_bedroom_fan).make_call();
            call.set_state(true);
            call.set_speed(id(fan_speed));
            call.perform();
          } else {
            auto call = id(master_bedroom_fan).make_call();
            call.set_state(false);
            call.perform();
          }

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "fb2vzV1T5nkmLN9/jRG8IOpnR/Zh13bHTOID/7aguZw="

ota:
  - platform: esphome
    password: "0fdf925ab181ca50524e4318fb2ac17a"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "3L1F Fallback Hotspot"
    password: "XZe7tAcWMDSj"

captive_portal:

uart:
  id: UART2
  tx_pin: 17
  rx_pin: 16
  baud_rate: 9600

globals:
  - id: light1_state
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: light2_state
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: light3_state
    type: bool
    restore_value: yes
    initial_value: 'false'
  - id: fan_speed
    type: int
    restore_value: yes
    initial_value: '0'  # 0=OFF, 1=LOW, 2=MEDIUM, 3=HIGH
  - id: uart_buffer
    type: std::string
    restore_value: no
    initial_value: '""'

interval:
  - interval: 500ms
    then:
      - lambda: |-
          while (id(UART2).available()) {
            uint8_t byte_data;
            if (id(UART2).read_byte(&byte_data)) {
              char c = byte_data;
              if (c == '\n') {
              // Process the completed line
              std::string line = id(uart_buffer);
              id(uart_buffer) = "";
              
              if (line == "L1") {
                id(light1_state) = true;
                id(light1).publish_state(true);
              } else if (line == "L0") {
                id(light1_state) = false;
                id(light1).publish_state(false);
              } else if (line == "M1") {
                id(light2_state) = true;
                id(light2).publish_state(true);
              } else if (line == "M0") {
                id(light2_state) = false;
                id(light2).publish_state(false);
              } else if (line == "N1") {
                id(light3_state) = true;
                id(light3).publish_state(true);
              } else if (line == "N0") {
                id(light3_state) = false;
                id(light3).publish_state(false);
              }else if (line == "F0") {
                id(fan_speed) = 0;
                auto call = id(master_bedroom_fan).make_call();
                call.set_state(false);
                call.set_speed(0);  
                call.perform();
              } else if (line == "F1") {
                id(fan_speed) = 1;
                auto call = id(master_bedroom_fan).make_call();
                call.set_speed(1);
                call.set_state(true);
                call.perform();
              } else if (line == "F2") {
                id(fan_speed) = 2;
                auto call = id(master_bedroom_fan).make_call();
                call.set_speed(2);
                call.set_state(true);
                call.perform();
              }else if (line == "F3") {
                id(fan_speed) = 3;
                auto call = id(master_bedroom_fan).make_call();
                call.set_speed(3);
                call.set_state(true);
                call.perform();
              }
              } else {
                // Add character to buffer (ignore carriage return)
                if (c != '\r') {
                  id(uart_buffer) += c;
                }
              }
            }
          }

# Fan control (3-speed + Off)
fan:
  - platform: template
    name: "Master Bedroom Fan"
    id: master_bedroom_fan
    speed_count: 3

    on_turn_on:
      then:
        - lambda: |-
            int speed = id(fan_speed);
            //if (speed == 0) speed = 1;  
            if (speed == 1) {
              id(UART2).write_str("F1\n");
            } else if (speed == 2) {
              id(UART2).write_str("F2\n");
            } else if (speed == 3) {
              id(UART2).write_str("F3\n");
            }

    on_turn_off:
      then:
        - lambda: |-
            id(fan_speed) = 0;
        - uart.write:
            id: UART2
            data: "F0\n"

    on_speed_set:
      then:
        - lambda: |-
            id(fan_speed) = x;  // Store latest speed
            if (id(master_bedroom_fan).state) {  
              if (x == 1) {
                id(UART2).write_str("F1\n");
              } else if (x == 2) {
                id(UART2).write_str("F2\n");
              } else if (x == 3) {
                id(UART2).write_str("F3\n");
              }
            }

# Light switches
switch:
  - platform: template
    name: "Light 1"
    id: light1
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      return id(light1_state);
    turn_on_action:
      - uart.write:
          id: UART2
          data: "L1\n"

      - lambda: |-
          id(light1_state) = true;
          id(light1).publish_state(true);

    turn_off_action:
      - uart.write:
          id: UART2
          data: "L0\n"

      - lambda: |-
          id(light1_state) = false;
          id(light1).publish_state(false);

  - platform: template
    name: "Light 2"
    id: light2
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      return id(light2_state);
    turn_on_action:
      - uart.write:
          id: UART2
          data: "M1\n"

      - lambda: |-
          id(light2_state) = true;
          id(light2).publish_state(true);

    turn_off_action:
      - uart.write:
          id: UART2
          data: "M0\n"

      - lambda: |-
          id(light2_state) = false;
          id(light2).publish_state(false);

  - platform: template
    name: "Light 3"
    id: light3
    restore_mode: RESTORE_DEFAULT_OFF
    lambda: |-
      return id(light3_state);
    turn_on_action:
      - uart.write:
          id: UART2
          data: "N1\n"

      - lambda: |-
          id(light3_state) = true;
          id(light3).publish_state(true);

    turn_off_action:
      - uart.write:
          id: UART2
          data: "N0\n"

      - lambda: |-
          id(light3_state) = false;
          id(light3).publish_state(false);

