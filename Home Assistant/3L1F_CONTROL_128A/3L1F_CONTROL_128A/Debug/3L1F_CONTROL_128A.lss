
3L1F_CONTROL_128A.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00000680  00000714  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000680  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000009  00800140  00800140  00000754  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000754  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000784  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  000007c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001a3a  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cf8  00000000  00000000  000023be  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f57  00000000  00000000  000030b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c4  00000000  00000000  00004010  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000755  00000000  00000000  000043d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005ae  00000000  00000000  00004b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  000050d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	10 c1       	rjmp	.+544    	; 0x266 <__vector_17>
  46:	00 00       	nop
  48:	4d c1       	rjmp	.+666    	; 0x2e4 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 e8       	ldi	r30, 0x80	; 128
  a0:	f6 e0       	ldi	r31, 0x06	; 6
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 34       	cpi	r26, 0x40	; 64
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e4       	ldi	r26, 0x40	; 64
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 34       	cpi	r26, 0x49	; 73
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	54 d1       	rcall	.+680    	; 0x36c <main>
  c4:	db c2       	rjmp	.+1462   	; 0x67c <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <as0>:
	PORTC &= ~(1 << PC0);

	PORTF &= ~(1 << PF0);     //Relay Pins
	PORTF |= (1 << PF1);
	PORTF |= (1 << PF2);      //5.5k
	PORTF &= ~(1 << PF3);
  c8:	85 b3       	in	r24, 0x15	; 21
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	85 bb       	out	0x15, r24	; 21
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7e       	andi	r24, 0xEF	; 239
  d2:	82 bb       	out	0x12, r24	; 18
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8f 7d       	andi	r24, 0xDF	; 223
  d8:	82 bb       	out	0x12, r24	; 18
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	8f 7b       	andi	r24, 0xBF	; 191
  de:	82 bb       	out	0x12, r24	; 18
  e0:	82 b3       	in	r24, 0x12	; 18
  e2:	8f 77       	andi	r24, 0x7F	; 127
  e4:	82 bb       	out	0x12, r24	; 18
  e6:	85 b3       	in	r24, 0x15	; 21
  e8:	8e 7f       	andi	r24, 0xFE	; 254
  ea:	85 bb       	out	0x15, r24	; 21
  ec:	e2 e6       	ldi	r30, 0x62	; 98
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	80 83       	st	Z, r24
  f6:	80 81       	ld	r24, Z
  f8:	8d 7f       	andi	r24, 0xFD	; 253
  fa:	80 83       	st	Z, r24
  fc:	80 81       	ld	r24, Z
  fe:	8b 7f       	andi	r24, 0xFB	; 251
 100:	80 83       	st	Z, r24
 102:	80 81       	ld	r24, Z
 104:	87 7f       	andi	r24, 0xF7	; 247
 106:	80 83       	st	Z, r24
 108:	08 95       	ret

0000010a <as1>:
 10a:	85 b3       	in	r24, 0x15	; 21
 10c:	84 60       	ori	r24, 0x04	; 4
 10e:	85 bb       	out	0x15, r24	; 21
 110:	82 b3       	in	r24, 0x12	; 18
 112:	80 61       	ori	r24, 0x10	; 16
 114:	82 bb       	out	0x12, r24	; 18
 116:	82 b3       	in	r24, 0x12	; 18
 118:	8f 7d       	andi	r24, 0xDF	; 223
 11a:	82 bb       	out	0x12, r24	; 18
 11c:	82 b3       	in	r24, 0x12	; 18
 11e:	8f 7b       	andi	r24, 0xBF	; 191
 120:	82 bb       	out	0x12, r24	; 18
 122:	82 b3       	in	r24, 0x12	; 18
 124:	8f 77       	andi	r24, 0x7F	; 127
 126:	82 bb       	out	0x12, r24	; 18
 128:	85 b3       	in	r24, 0x15	; 21
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	85 bb       	out	0x15, r24	; 21
 12e:	e2 e6       	ldi	r30, 0x62	; 98
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	80 83       	st	Z, r24
 138:	80 81       	ld	r24, Z
 13a:	82 60       	ori	r24, 0x02	; 2
 13c:	80 83       	st	Z, r24
 13e:	80 81       	ld	r24, Z
 140:	8b 7f       	andi	r24, 0xFB	; 251
 142:	80 83       	st	Z, r24
 144:	80 81       	ld	r24, Z
 146:	87 7f       	andi	r24, 0xF7	; 247
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <as3>:
 14c:	85 b3       	in	r24, 0x15	; 21
 14e:	84 60       	ori	r24, 0x04	; 4
 150:	85 bb       	out	0x15, r24	; 21
 152:	82 b3       	in	r24, 0x12	; 18
 154:	80 61       	ori	r24, 0x10	; 16
 156:	82 bb       	out	0x12, r24	; 18
 158:	82 b3       	in	r24, 0x12	; 18
 15a:	80 62       	ori	r24, 0x20	; 32
 15c:	82 bb       	out	0x12, r24	; 18
 15e:	82 b3       	in	r24, 0x12	; 18
 160:	80 64       	ori	r24, 0x40	; 64
 162:	82 bb       	out	0x12, r24	; 18
 164:	82 b3       	in	r24, 0x12	; 18
 166:	8f 77       	andi	r24, 0x7F	; 127
 168:	82 bb       	out	0x12, r24	; 18
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	8e 7f       	andi	r24, 0xFE	; 254
 16e:	85 bb       	out	0x15, r24	; 21
 170:	e2 e6       	ldi	r30, 0x62	; 98
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	81 60       	ori	r24, 0x01	; 1
 178:	80 83       	st	Z, r24
 17a:	80 81       	ld	r24, Z
 17c:	8d 7f       	andi	r24, 0xFD	; 253
 17e:	80 83       	st	Z, r24
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	80 83       	st	Z, r24
 186:	80 81       	ld	r24, Z
 188:	87 7f       	andi	r24, 0xF7	; 247
 18a:	80 83       	st	Z, r24
 18c:	08 95       	ret

0000018e <as5>:
}

void as5() {       // fan speed 5
	
	PORTC |= (1 << PC2);  // fan on led
 18e:	85 b3       	in	r24, 0x15	; 21
 190:	84 60       	ori	r24, 0x04	; 4
 192:	85 bb       	out	0x15, r24	; 21
	
	PORTD |= (1 << PD4);
 194:	82 b3       	in	r24, 0x12	; 18
 196:	80 61       	ori	r24, 0x10	; 16
 198:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD5);
 19a:	82 b3       	in	r24, 0x12	; 18
 19c:	80 62       	ori	r24, 0x20	; 32
 19e:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD6);     // Led Pins
 1a0:	82 b3       	in	r24, 0x12	; 18
 1a2:	80 64       	ori	r24, 0x40	; 64
 1a4:	82 bb       	out	0x12, r24	; 18
	PORTD |= (1 << PD7);
 1a6:	82 b3       	in	r24, 0x12	; 18
 1a8:	80 68       	ori	r24, 0x80	; 128
 1aa:	82 bb       	out	0x12, r24	; 18
	PORTC |= (1 << PC0);
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	81 60       	ori	r24, 0x01	; 1
 1b0:	85 bb       	out	0x15, r24	; 21
	

	PORTF &= ~(1 << PF0);     //Relay Pins
 1b2:	e2 e6       	ldi	r30, 0x62	; 98
 1b4:	f0 e0       	ldi	r31, 0x00	; 0
 1b6:	80 81       	ld	r24, Z
 1b8:	8e 7f       	andi	r24, 0xFE	; 254
 1ba:	80 83       	st	Z, r24
	PORTF &= ~(1 << PF1);
 1bc:	80 81       	ld	r24, Z
 1be:	8d 7f       	andi	r24, 0xFD	; 253
 1c0:	80 83       	st	Z, r24
	PORTF &= ~(1 << PF2);
 1c2:	80 81       	ld	r24, Z
 1c4:	8b 7f       	andi	r24, 0xFB	; 251
 1c6:	80 83       	st	Z, r24
	PORTF |= (1 << PF3);       //direct
 1c8:	80 81       	ld	r24, Z
 1ca:	88 60       	ori	r24, 0x08	; 8
 1cc:	80 83       	st	Z, r24
 1ce:	08 95       	ret

000001d0 <i2c_init>:


#include "i2c.h"

void i2c_init(void) {
	TWSR = 0x00;
 1d0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
	TWBR = 0x48;
 1d4:	88 e4       	ldi	r24, 0x48	; 72
 1d6:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 1da:	08 95       	ret

000001dc <light1_ON>:


#include "lights.h"

void light1_ON(){
	PORTC |= (1 << PC1);
 1dc:	85 b3       	in	r24, 0x15	; 21
 1de:	82 60       	ori	r24, 0x02	; 2
 1e0:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF4);
 1e2:	e2 e6       	ldi	r30, 0x62	; 98
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	80 61       	ori	r24, 0x10	; 16
 1ea:	80 83       	st	Z, r24
	laststate.lightState_1 = 1;
 1ec:	81 e0       	ldi	r24, 0x01	; 1
 1ee:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <laststate>
 1f2:	08 95       	ret

000001f4 <light1_OFF>:
}

void light1_OFF(){
	PORTC &= ~(1 << PC1);
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	8d 7f       	andi	r24, 0xFD	; 253
 1f8:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF4);
 1fa:	e2 e6       	ldi	r30, 0x62	; 98
 1fc:	f0 e0       	ldi	r31, 0x00	; 0
 1fe:	80 81       	ld	r24, Z
 200:	8f 7e       	andi	r24, 0xEF	; 239
 202:	80 83       	st	Z, r24
	laststate.lightState_1 = 0;
 204:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <laststate>
 208:	08 95       	ret

0000020a <light2_ON>:
}

void light2_ON(){
	PORTC |= (1 << PC3);
 20a:	85 b3       	in	r24, 0x15	; 21
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF5);
 210:	e2 e6       	ldi	r30, 0x62	; 98
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	80 81       	ld	r24, Z
 216:	80 62       	ori	r24, 0x20	; 32
 218:	80 83       	st	Z, r24
	laststate.lightState_2 = 1;
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <laststate+0x1>
 220:	08 95       	ret

00000222 <light2_OFF>:
}
void light2_OFF(){
	PORTC &= ~(1 << PC3);
 222:	85 b3       	in	r24, 0x15	; 21
 224:	87 7f       	andi	r24, 0xF7	; 247
 226:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF5);
 228:	e2 e6       	ldi	r30, 0x62	; 98
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	80 81       	ld	r24, Z
 22e:	8f 7d       	andi	r24, 0xDF	; 223
 230:	80 83       	st	Z, r24
	laststate.lightState_2 = 0;
 232:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <laststate+0x1>
 236:	08 95       	ret

00000238 <light3_ON>:
}

void light3_ON(){
	PORTC |= (1 << PC4);
 238:	85 b3       	in	r24, 0x15	; 21
 23a:	80 61       	ori	r24, 0x10	; 16
 23c:	85 bb       	out	0x15, r24	; 21
	PORTF |= (1 << PF6);
 23e:	e2 e6       	ldi	r30, 0x62	; 98
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	80 81       	ld	r24, Z
 244:	80 64       	ori	r24, 0x40	; 64
 246:	80 83       	st	Z, r24
	laststate.lightState_3 = 1;
 248:	81 e0       	ldi	r24, 0x01	; 1
 24a:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <laststate+0x2>
 24e:	08 95       	ret

00000250 <light3_OFF>:
}

void light3_OFF(){
	PORTC &= ~(1 << PC4);
 250:	85 b3       	in	r24, 0x15	; 21
 252:	8f 7e       	andi	r24, 0xEF	; 239
 254:	85 bb       	out	0x15, r24	; 21
	PORTF &= ~(1 << PF6);
 256:	e2 e6       	ldi	r30, 0x62	; 98
 258:	f0 e0       	ldi	r31, 0x00	; 0
 25a:	80 81       	ld	r24, Z
 25c:	8f 7b       	andi	r24, 0xBF	; 191
 25e:	80 83       	st	Z, r24
	laststate.lightState_3 = 0;
 260:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <laststate+0x2>
 264:	08 95       	ret

00000266 <__vector_17>:
    while (1) 
    {
    }
}

ISR(SPI_STC_vect) {
 266:	1f 92       	push	r1
 268:	0f 92       	push	r0
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	0f 92       	push	r0
 26e:	11 24       	eor	r1, r1
 270:	0b b6       	in	r0, 0x3b	; 59
 272:	0f 92       	push	r0
 274:	2f 93       	push	r18
 276:	3f 93       	push	r19
 278:	4f 93       	push	r20
 27a:	5f 93       	push	r21
 27c:	6f 93       	push	r22
 27e:	7f 93       	push	r23
 280:	8f 93       	push	r24
 282:	9f 93       	push	r25
 284:	af 93       	push	r26
 286:	bf 93       	push	r27
 288:	ef 93       	push	r30
 28a:	ff 93       	push	r31
	uint8_t receivedData = SPDR;                    // Read received data from SPI data register
 28c:	9f b1       	in	r25, 0x0f	; 15
	static char receivedBytes[3];
	static uint8_t byteIndex = 0;
	if (byteIndex < 2) {
 28e:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <byteIndex.1977>
 292:	82 30       	cpi	r24, 0x02	; 2
 294:	88 f4       	brcc	.+34     	; 0x2b8 <__vector_17+0x52>
		receivedBytes[byteIndex] = receivedData;
 296:	e8 2f       	mov	r30, r24
 298:	f0 e0       	ldi	r31, 0x00	; 0
 29a:	e0 5c       	subi	r30, 0xC0	; 192
 29c:	fe 4f       	sbci	r31, 0xFE	; 254
 29e:	90 83       	st	Z, r25
		byteIndex++;
 2a0:	8f 5f       	subi	r24, 0xFF	; 255
 2a2:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <byteIndex.1977>
		if (byteIndex == 2) {
 2a6:	82 30       	cpi	r24, 0x02	; 2
 2a8:	39 f4       	brne	.+14     	; 0x2b8 <__vector_17+0x52>
			receivedBytes[2] = '\0';
 2aa:	10 92 42 01 	sts	0x0142, r1	; 0x800142 <__data_end+0x2>
			SPIprocessCommand(receivedBytes);          // Process the received command
 2ae:	80 e4       	ldi	r24, 0x40	; 64
 2b0:	91 e0       	ldi	r25, 0x01	; 1
 2b2:	5e d0       	rcall	.+188    	; 0x370 <SPIprocessCommand>
			byteIndex = 0;
 2b4:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <byteIndex.1977>
		}
	}
	SPSR |= (1 << SPIF);
 2b8:	8e b1       	in	r24, 0x0e	; 14
 2ba:	80 68       	ori	r24, 0x80	; 128
 2bc:	8e b9       	out	0x0e, r24	; 14
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	bf 91       	pop	r27
 2c4:	af 91       	pop	r26
 2c6:	9f 91       	pop	r25
 2c8:	8f 91       	pop	r24
 2ca:	7f 91       	pop	r23
 2cc:	6f 91       	pop	r22
 2ce:	5f 91       	pop	r21
 2d0:	4f 91       	pop	r20
 2d2:	3f 91       	pop	r19
 2d4:	2f 91       	pop	r18
 2d6:	0f 90       	pop	r0
 2d8:	0b be       	out	0x3b, r0	; 59
 2da:	0f 90       	pop	r0
 2dc:	0f be       	out	0x3f, r0	; 63
 2de:	0f 90       	pop	r0
 2e0:	1f 90       	pop	r1
 2e2:	18 95       	reti

000002e4 <__vector_18>:

ISR(USART0_RX_vect){
 2e4:	1f 92       	push	r1
 2e6:	0f 92       	push	r0
 2e8:	0f b6       	in	r0, 0x3f	; 63
 2ea:	0f 92       	push	r0
 2ec:	11 24       	eor	r1, r1
 2ee:	0b b6       	in	r0, 0x3b	; 59
 2f0:	0f 92       	push	r0
 2f2:	2f 93       	push	r18
 2f4:	3f 93       	push	r19
 2f6:	4f 93       	push	r20
 2f8:	5f 93       	push	r21
 2fa:	6f 93       	push	r22
 2fc:	7f 93       	push	r23
 2fe:	8f 93       	push	r24
 300:	9f 93       	push	r25
 302:	af 93       	push	r26
 304:	bf 93       	push	r27
 306:	ef 93       	push	r30
 308:	ff 93       	push	r31
	unsigned char receivedData = UDR0;
 30a:	8c b1       	in	r24, 0x0c	; 12
	UARTprocessCommand(receivedData);
 30c:	68 d1       	rcall	.+720    	; 0x5de <UARTprocessCommand>
}
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0b be       	out	0x3b, r0	; 59
 32a:	0f 90       	pop	r0
 32c:	0f be       	out	0x3f, r0	; 63
 32e:	0f 90       	pop	r0
 330:	1f 90       	pop	r1
 332:	18 95       	reti

00000334 <SPI_init_slave>:

void SPI_init_slave() {
	DDRB |= (1 << DDB4);
 334:	87 b3       	in	r24, 0x17	; 23
 336:	80 61       	ori	r24, 0x10	; 16
 338:	87 bb       	out	0x17, r24	; 23
	SPCR |= (1 << SPE);
 33a:	8d b1       	in	r24, 0x0d	; 13
 33c:	80 64       	ori	r24, 0x40	; 64
 33e:	8d b9       	out	0x0d, r24	; 13
	SPCR |= (1 << SPIE);
 340:	8d b1       	in	r24, 0x0d	; 13
 342:	80 68       	ori	r24, 0x80	; 128
 344:	8d b9       	out	0x0d, r24	; 13
 346:	08 95       	ret

00000348 <setup>:
}


void setup(void){
	i2c_init();
 348:	43 df       	rcall	.-378    	; 0x1d0 <i2c_init>
	SPI_init_slave();
 34a:	f4 df       	rcall	.-24     	; 0x334 <SPI_init_slave>
 34c:	87 e6       	ldi	r24, 0x67	; 103
	USART_Init(MYUBRR);
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	29 d1       	rcall	.+594    	; 0x5a4 <USART_Init>
 352:	78 94       	sei
	sei(); // Enable global interrupts
 354:	81 b3       	in	r24, 0x11	; 17
	
	DDRD |= (1<<7)|(1<<5)|(1<<6)|(1<<4);
 356:	80 6f       	ori	r24, 0xF0	; 240
 358:	81 bb       	out	0x11, r24	; 17
 35a:	e1 e6       	ldi	r30, 0x61	; 97
	DDRF |= (1<<4)|(1<<5)|(1<<6)|(1<<3)|(1<<2)|(1<<1)|(1<<0);
 35c:	f0 e0       	ldi	r31, 0x00	; 0
 35e:	80 81       	ld	r24, Z
 360:	8f 67       	ori	r24, 0x7F	; 127
 362:	80 83       	st	Z, r24
 364:	84 b3       	in	r24, 0x14	; 20
	DDRC |= (1<<4)|(1<<3)|(1<<2)|(1<<1)|(1<<0)|(1<<6)|(1<<7);
 366:	8f 6d       	ori	r24, 0xDF	; 223
 368:	84 bb       	out	0x14, r24	; 20
 36a:	08 95       	ret

0000036c <main>:
 36c:	ed df       	rcall	.-38     	; 0x348 <setup>
uint8_t fan1_speed = 0;
volatile uint8_t timer_flag = 0;

int main(void)
{
    setup();
 36e:	ff cf       	rjmp	.-2      	; 0x36e <main+0x2>

00000370 <SPIprocessCommand>:

#include "spiDataProcess.h"

const char* command;

void SPIprocessCommand(const char* command) {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	ec 01       	movw	r28, r24
	
	if (strcmp(command, "H1") == 0) {        //Network Reset
 376:	68 e1       	ldi	r22, 0x18	; 24
 378:	71 e0       	ldi	r23, 0x01	; 1
 37a:	77 d1       	rcall	.+750    	; 0x66a <strcmp>
 37c:	89 2b       	or	r24, r25
 37e:	19 f4       	brne	.+6      	; 0x386 <SPIprocessCommand+0x16>
		USART_Transmit('G');
 380:	87 e4       	ldi	r24, 0x47	; 71
 382:	19 d1       	rcall	.+562    	; 0x5b6 <USART_Transmit>
 384:	0c c1       	rjmp	.+536    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
	
	/*else if(strcmp(command, "R1") == 0){     // ESP restart
		USART_Transmit('x');
	}*/
	
	else if (strcmp(command, "L1") == 0) {
 386:	6b e1       	ldi	r22, 0x1B	; 27
 388:	71 e0       	ldi	r23, 0x01	; 1
 38a:	ce 01       	movw	r24, r28
 38c:	6e d1       	rcall	.+732    	; 0x66a <strcmp>
 38e:	89 2b       	or	r24, r25
 390:	09 f5       	brne	.+66     	; 0x3d4 <SPIprocessCommand+0x64>
		PORTC ^= (1 << PC1);               //LIGHT 1
 392:	95 b3       	in	r25, 0x15	; 21
 394:	82 e0       	ldi	r24, 0x02	; 2
 396:	89 27       	eor	r24, r25
 398:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF4);
 39a:	e2 e6       	ldi	r30, 0x62	; 98
 39c:	f0 e0       	ldi	r31, 0x00	; 0
 39e:	90 81       	ld	r25, Z
 3a0:	80 e1       	ldi	r24, 0x10	; 16
 3a2:	89 27       	eor	r24, r25
 3a4:	80 83       	st	Z, r24
		uint8_t newLightState_1 = (laststate.lightState_1 == 0) ? 1 : 0;
 3a6:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <laststate>
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	91 11       	cpse	r25, r1
 3ae:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_1 != laststate.lightState_1) {
 3b0:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <laststate>
 3b4:	89 17       	cp	r24, r25
 3b6:	09 f4       	brne	.+2      	; 0x3ba <SPIprocessCommand+0x4a>
 3b8:	f2 c0       	rjmp	.+484    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			laststate.lightState_1 = newLightState_1;
 3ba:	e5 e4       	ldi	r30, 0x45	; 69
 3bc:	f1 e0       	ldi	r31, 0x01	; 1
 3be:	80 83       	st	Z, r24
			//eeprom_write(light1_address, laststate.lightState_1);                
			//USART_Transmit(laststate.lightState_1 == 1 ? 'P' : 'Q');
			USART_SendString(laststate.lightState_1 == 1 ? "L1\n" : "L0\n");
 3c0:	80 81       	ld	r24, Z
 3c2:	81 30       	cpi	r24, 0x01	; 1
 3c4:	19 f4       	brne	.+6      	; 0x3cc <SPIprocessCommand+0x5c>
 3c6:	80 e0       	ldi	r24, 0x00	; 0
 3c8:	91 e0       	ldi	r25, 0x01	; 1
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <SPIprocessCommand+0x60>
 3cc:	84 e0       	ldi	r24, 0x04	; 4
 3ce:	91 e0       	ldi	r25, 0x01	; 1
 3d0:	f6 d0       	rcall	.+492    	; 0x5be <USART_SendString>
		}
	}

	else if (strcmp(command, "L2") == 0) {    //light 2
 3d2:	e5 c0       	rjmp	.+458    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 3d4:	6e e1       	ldi	r22, 0x1E	; 30
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	ce 01       	movw	r24, r28
 3da:	47 d1       	rcall	.+654    	; 0x66a <strcmp>
 3dc:	89 2b       	or	r24, r25
 3de:	09 f5       	brne	.+66     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
		PORTC ^= (1 << PC3);
 3e0:	95 b3       	in	r25, 0x15	; 21
 3e2:	88 e0       	ldi	r24, 0x08	; 8
 3e4:	89 27       	eor	r24, r25
 3e6:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF5);
 3e8:	e2 e6       	ldi	r30, 0x62	; 98
 3ea:	f0 e0       	ldi	r31, 0x00	; 0
 3ec:	90 81       	ld	r25, Z
 3ee:	80 e2       	ldi	r24, 0x20	; 32
 3f0:	89 27       	eor	r24, r25
 3f2:	80 83       	st	Z, r24
		uint8_t newLightState_2 = (laststate.lightState_2 == 0) ? 1 : 0;
 3f4:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <laststate+0x1>
 3f8:	81 e0       	ldi	r24, 0x01	; 1
 3fa:	91 11       	cpse	r25, r1
 3fc:	80 e0       	ldi	r24, 0x00	; 0
		if(newLightState_2 != laststate.lightState_2){
 3fe:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <laststate+0x1>
 402:	89 17       	cp	r24, r25
 404:	09 f4       	brne	.+2      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 406:	cb c0       	rjmp	.+406    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			laststate.lightState_2 = newLightState_2;
 408:	e5 e4       	ldi	r30, 0x45	; 69
 40a:	f1 e0       	ldi	r31, 0x01	; 1
 40c:	81 83       	std	Z+1, r24	; 0x01
			//eeprom_write(light2_address, laststate.lightState_2);                
			//USART_Transmit(laststate.lightState_2 == 1 ? 'R' : 'S');
			USART_SendString(laststate.lightState_2 == 1 ? "M1\n" : "M0\n");
 40e:	81 81       	ldd	r24, Z+1	; 0x01
 410:	81 30       	cpi	r24, 0x01	; 1
 412:	19 f4       	brne	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
 414:	88 e0       	ldi	r24, 0x08	; 8
 416:	91 e0       	ldi	r25, 0x01	; 1
 418:	02 c0       	rjmp	.+4      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41a:	8c e0       	ldi	r24, 0x0C	; 12
 41c:	91 e0       	ldi	r25, 0x01	; 1
 41e:	cf d0       	rcall	.+414    	; 0x5be <USART_SendString>
		}
	}
	
	
	else if (strcmp(command, "L3") == 0) {  //light 3
 420:	be c0       	rjmp	.+380    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 422:	61 e2       	ldi	r22, 0x21	; 33
 424:	71 e0       	ldi	r23, 0x01	; 1
 426:	ce 01       	movw	r24, r28
 428:	20 d1       	rcall	.+576    	; 0x66a <strcmp>
 42a:	89 2b       	or	r24, r25
 42c:	09 f5       	brne	.+66     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		PORTC ^= (1 << PC4);
 42e:	95 b3       	in	r25, 0x15	; 21
 430:	80 e1       	ldi	r24, 0x10	; 16
 432:	89 27       	eor	r24, r25
 434:	85 bb       	out	0x15, r24	; 21
		PORTF ^= (1 << PF6);
 436:	e2 e6       	ldi	r30, 0x62	; 98
 438:	f0 e0       	ldi	r31, 0x00	; 0
 43a:	90 81       	ld	r25, Z
 43c:	80 e4       	ldi	r24, 0x40	; 64
 43e:	89 27       	eor	r24, r25
 440:	80 83       	st	Z, r24
		uint8_t newLightState_3 = (laststate.lightState_3 == 0) ? 1 : 0;
 442:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <laststate+0x2>
 446:	81 e0       	ldi	r24, 0x01	; 1
 448:	91 11       	cpse	r25, r1
 44a:	80 e0       	ldi	r24, 0x00	; 0
		if (newLightState_3 != laststate.lightState_3){
 44c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <laststate+0x2>
 450:	89 17       	cp	r24, r25
 452:	09 f4       	brne	.+2      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
 454:	a4 c0       	rjmp	.+328    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			laststate.lightState_3 = newLightState_3;
 456:	e5 e4       	ldi	r30, 0x45	; 69
 458:	f1 e0       	ldi	r31, 0x01	; 1
 45a:	82 83       	std	Z+2, r24	; 0x02
			//eeprom_write(light3_address, laststate.lightState_3);                  
			//USART_Transmit(laststate.lightState_3 == 1 ? 'T' : 'U');
			USART_SendString(laststate.lightState_3 == 1 ? "N1\n" : "N0\n");
 45c:	82 81       	ldd	r24, Z+2	; 0x02
 45e:	81 30       	cpi	r24, 0x01	; 1
 460:	19 f4       	brne	.+6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
 462:	80 e1       	ldi	r24, 0x10	; 16
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	02 c0       	rjmp	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 468:	84 e1       	ldi	r24, 0x14	; 20
 46a:	91 e0       	ldi	r25, 0x01	; 1
 46c:	a8 d0       	rcall	.+336    	; 0x5be <USART_SendString>
		}
	}
	
	else if (strcmp(command, "F0") == 0) {                                  // Fan1 ON state
 46e:	97 c0       	rjmp	.+302    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 470:	64 e2       	ldi	r22, 0x24	; 36
 472:	71 e0       	ldi	r23, 0x01	; 1
 474:	ce 01       	movw	r24, r28
 476:	f9 d0       	rcall	.+498    	; 0x66a <strcmp>
 478:	89 2b       	or	r24, r25
 47a:	09 f0       	breq	.+2      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		switch(laststate.lastF1State){
 47c:	48 c0       	rjmp	.+144    	; 0x50e <__LOCK_REGION_LENGTH__+0x10e>
 47e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <laststate+0x3>
 482:	82 30       	cpi	r24, 0x02	; 2
 484:	61 f0       	breq	.+24     	; 0x49e <__LOCK_REGION_LENGTH__+0x9e>
 486:	83 30       	cpi	r24, 0x03	; 3
 488:	91 f0       	breq	.+36     	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
			case 1: as1(); USART_SendString("F1\n"); laststate.lastF1State = 1; break;
 48a:	81 30       	cpi	r24, 0x01	; 1
 48c:	c1 f4       	brne	.+48     	; 0x4be <__LOCK_REGION_LENGTH__+0xbe>
 48e:	3d de       	rcall	.-902    	; 0x10a <as1>
 490:	87 e2       	ldi	r24, 0x27	; 39
 492:	91 e0       	ldi	r25, 0x01	; 1
 494:	94 d0       	rcall	.+296    	; 0x5be <USART_SendString>
 496:	81 e0       	ldi	r24, 0x01	; 1
 498:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			case 2: as3(); USART_SendString("F2\n"); laststate.lastF1State = 2; break;
 49c:	80 c0       	rjmp	.+256    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 49e:	56 de       	rcall	.-852    	; 0x14c <as3>
 4a0:	8b e2       	ldi	r24, 0x2B	; 43
 4a2:	91 e0       	ldi	r25, 0x01	; 1
 4a4:	8c d0       	rcall	.+280    	; 0x5be <USART_SendString>
 4a6:	82 e0       	ldi	r24, 0x02	; 2
 4a8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			case 3: as5(); USART_SendString("F3\n"); laststate.lastF1State = 3; break;
 4ac:	78 c0       	rjmp	.+240    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 4ae:	6f de       	rcall	.-802    	; 0x18e <as5>
 4b0:	8f e2       	ldi	r24, 0x2F	; 47
 4b2:	91 e0       	ldi	r25, 0x01	; 1
 4b4:	84 d0       	rcall	.+264    	; 0x5be <USART_SendString>
 4b6:	83 e0       	ldi	r24, 0x03	; 3
 4b8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			default: 
			switch(fan1_speed){
 4bc:	70 c0       	rjmp	.+224    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 4be:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <fan1_speed>
 4c2:	82 30       	cpi	r24, 0x02	; 2
 4c4:	61 f0       	breq	.+24     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
 4c6:	83 30       	cpi	r24, 0x03	; 3
				case 1: as1(); USART_SendString("F1\n"); laststate.lastF1State = 1; break;
 4c8:	91 f0       	breq	.+36     	; 0x4ee <__LOCK_REGION_LENGTH__+0xee>
 4ca:	81 30       	cpi	r24, 0x01	; 1
 4cc:	c1 f4       	brne	.+48     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
 4ce:	1d de       	rcall	.-966    	; 0x10a <as1>
 4d0:	87 e2       	ldi	r24, 0x27	; 39
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	74 d0       	rcall	.+232    	; 0x5be <USART_SendString>
 4d6:	81 e0       	ldi	r24, 0x01	; 1
				case 2: as3(); USART_SendString("F2\n"); laststate.lastF1State = 2; break;
 4d8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
 4dc:	60 c0       	rjmp	.+192    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 4de:	36 de       	rcall	.-916    	; 0x14c <as3>
 4e0:	8b e2       	ldi	r24, 0x2B	; 43
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	6c d0       	rcall	.+216    	; 0x5be <USART_SendString>
 4e6:	82 e0       	ldi	r24, 0x02	; 2
 4e8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
				case 3: as5(); USART_SendString("F3\n"); laststate.lastF1State = 3; break;
 4ec:	58 c0       	rjmp	.+176    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 4ee:	4f de       	rcall	.-866    	; 0x18e <as5>
 4f0:	8f e2       	ldi	r24, 0x2F	; 47
 4f2:	91 e0       	ldi	r25, 0x01	; 1
 4f4:	64 d0       	rcall	.+200    	; 0x5be <USART_SendString>
 4f6:	83 e0       	ldi	r24, 0x03	; 3
				default:as5(); USART_SendString("F3\n"); laststate.lastF1State = 3; break;
 4f8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
 4fc:	50 c0       	rjmp	.+160    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 4fe:	47 de       	rcall	.-882    	; 0x18e <as5>
 500:	8f e2       	ldi	r24, 0x2F	; 47
 502:	91 e0       	ldi	r25, 0x01	; 1
 504:	5c d0       	rcall	.+184    	; 0x5be <USART_SendString>
 506:	83 e0       	ldi	r24, 0x03	; 3
			break;
		}
		//eeprom_write(fan1_address, laststate.lastF1State);
	}
	
	else if (strcmp(command, "F1") == 0) {                                    // fan1 off state
 508:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
 50c:	48 c0       	rjmp	.+144    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 50e:	63 e3       	ldi	r22, 0x33	; 51
 510:	71 e0       	ldi	r23, 0x01	; 1
 512:	ce 01       	movw	r24, r28
 514:	aa d0       	rcall	.+340    	; 0x66a <strcmp>
		//USART_Transmit('B');
		USART_SendString("F0\n");
 516:	89 2b       	or	r24, r25
 518:	29 f4       	brne	.+10     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
		as0();
 51a:	86 e3       	ldi	r24, 0x36	; 54
 51c:	91 e0       	ldi	r25, 0x01	; 1
 51e:	4f d0       	rcall	.+158    	; 0x5be <USART_SendString>
		//eeprom_write(fan1_address, 0);
	}
	
	else if (strcmp(command, "U1") == 0) {                                   //fan increment
 520:	d3 dd       	rcall	.-1114   	; 0xc8 <as0>
 522:	3d c0       	rjmp	.+122    	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 524:	6a e3       	ldi	r22, 0x3A	; 58
 526:	71 e0       	ldi	r23, 0x01	; 1
 528:	ce 01       	movw	r24, r28
		if((PORTD & (1 << PD4)) == 0) {
 52a:	9f d0       	rcall	.+318    	; 0x66a <strcmp>
 52c:	89 2b       	or	r24, r25
			USART_SendString("F1\n");
 52e:	f1 f4       	brne	.+60     	; 0x56c <__LOCK_REGION_LENGTH__+0x16c>
 530:	94 99       	sbic	0x12, 4	; 18
 532:	08 c0       	rjmp	.+16     	; 0x544 <__LOCK_REGION_LENGTH__+0x144>
 534:	87 e2       	ldi	r24, 0x27	; 39
			as1();
 536:	91 e0       	ldi	r25, 0x01	; 1
			laststate.lastF1State = 1;
 538:	42 d0       	rcall	.+132    	; 0x5be <USART_SendString>
 53a:	e7 dd       	rcall	.-1074   	; 0x10a <as1>
 53c:	81 e0       	ldi	r24, 0x01	; 1
 53e:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
		}
		else if ((PORTD & (1 << PD6)) == 0) {
			USART_SendString("F2\n");
 542:	2d c0       	rjmp	.+90     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 544:	96 99       	sbic	0x12, 6	; 18
 546:	08 c0       	rjmp	.+16     	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
			as3();
 548:	8b e2       	ldi	r24, 0x2B	; 43
 54a:	91 e0       	ldi	r25, 0x01	; 1
			laststate.lastF1State = 2;
 54c:	38 d0       	rcall	.+112    	; 0x5be <USART_SendString>
 54e:	fe dd       	rcall	.-1028   	; 0x14c <as3>
 550:	82 e0       	ldi	r24, 0x02	; 2
		}
		else if ((PORTC & (1 << PC0)) == 0) {
 552:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			USART_SendString("F3\n");
 556:	23 c0       	rjmp	.+70     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 558:	a8 99       	sbic	0x15, 0	; 21
 55a:	21 c0       	rjmp	.+66     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
			as5();
 55c:	8f e2       	ldi	r24, 0x2F	; 47
 55e:	91 e0       	ldi	r25, 0x01	; 1
			laststate.lastF1State = 3;
 560:	2e d0       	rcall	.+92     	; 0x5be <USART_SendString>
 562:	15 de       	rcall	.-982    	; 0x18e <as5>
 564:	83 e0       	ldi	r24, 0x03	; 3
 566:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
		}
		//eeprom_write(fan1_address, laststate.lastF1State);
	}
	
	
	else if (strcmp(command, "D1") == 0) {                               // fan1 decrement
 56a:	19 c0       	rjmp	.+50     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 56c:	6d e3       	ldi	r22, 0x3D	; 61
 56e:	71 e0       	ldi	r23, 0x01	; 1
 570:	ce 01       	movw	r24, r28
 572:	7b d0       	rcall	.+246    	; 0x66a <strcmp>
 574:	89 2b       	or	r24, r25
		if ((PORTC & (1 << PC0)) != 0) {
 576:	99 f4       	brne	.+38     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 578:	a8 9b       	sbis	0x15, 0	; 21
			USART_SendString("F2\n");
 57a:	08 c0       	rjmp	.+16     	; 0x58c <__LOCK_REGION_LENGTH__+0x18c>
 57c:	8b e2       	ldi	r24, 0x2B	; 43
 57e:	91 e0       	ldi	r25, 0x01	; 1
 580:	1e d0       	rcall	.+60     	; 0x5be <USART_SendString>
			as3();
 582:	e4 dd       	rcall	.-1080   	; 0x14c <as3>
 584:	82 e0       	ldi	r24, 0x02	; 2
			laststate.lastF1State = 2;
 586:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
 58a:	09 c0       	rjmp	.+18     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 58c:	96 9b       	sbis	0x12, 6	; 18
		}
		else if ((PORTD & (1 << PD6)) != 0) {
 58e:	07 c0       	rjmp	.+14     	; 0x59e <__LOCK_REGION_LENGTH__+0x19e>
 590:	87 e2       	ldi	r24, 0x27	; 39
			USART_SendString("F1\n");
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	14 d0       	rcall	.+40     	; 0x5be <USART_SendString>
 596:	b9 dd       	rcall	.-1166   	; 0x10a <as1>
 598:	81 e0       	ldi	r24, 0x01	; 1
			as1();
 59a:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			laststate.lastF1State = 1;
 59e:	df 91       	pop	r29
 5a0:	cf 91       	pop	r28
 5a2:	08 95       	ret

000005a4 <USART_Init>:
#include "uart.h"


void USART_Init(unsigned int ubrr)
{
	UBRR0H = (unsigned char)(ubrr >> 8);
 5a4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = (unsigned char)ubrr;
 5a8:	89 b9       	out	0x09, r24	; 9
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
 5aa:	88 e9       	ldi	r24, 0x98	; 152
 5ac:	8a b9       	out	0x0a, r24	; 10
	UCSR0C = (1 << USBS0) | (3 << UCSZ00);
 5ae:	8e e0       	ldi	r24, 0x0E	; 14
 5b0:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 5b4:	08 95       	ret

000005b6 <USART_Transmit>:
}

void USART_Transmit(uint8_t data) {
	while (!(UCSR0A & (1 << UDRE0)));
 5b6:	5d 9b       	sbis	0x0b, 5	; 11
 5b8:	fe cf       	rjmp	.-4      	; 0x5b6 <USART_Transmit>
	UDR0 = data;
 5ba:	8c b9       	out	0x0c, r24	; 12
 5bc:	08 95       	ret

000005be <USART_SendString>:
}

void USART_SendString(const char *str) {
 5be:	cf 93       	push	r28
 5c0:	df 93       	push	r29
 5c2:	ec 01       	movw	r28, r24
	while (*str) {
 5c4:	02 c0       	rjmp	.+4      	; 0x5ca <USART_SendString+0xc>
		USART_Transmit(*str++);
 5c6:	21 96       	adiw	r28, 0x01	; 1
 5c8:	f6 df       	rcall	.-20     	; 0x5b6 <USART_Transmit>
	while (!(UCSR0A & (1 << UDRE0)));
	UDR0 = data;
}

void USART_SendString(const char *str) {
	while (*str) {
 5ca:	88 81       	ld	r24, Y
 5cc:	81 11       	cpse	r24, r1
 5ce:	fb cf       	rjmp	.-10     	; 0x5c6 <USART_SendString+0x8>
		USART_Transmit(*str++);
	}
}
 5d0:	df 91       	pop	r29
 5d2:	cf 91       	pop	r28
 5d4:	08 95       	ret

000005d6 <USART_Receive>:

unsigned char USART_Receive(void)
{
	while (!(UCSR0A & (1 << RXC0)));
 5d6:	5f 9b       	sbis	0x0b, 7	; 11
 5d8:	fe cf       	rjmp	.-4      	; 0x5d6 <USART_Receive>
	return UDR0;
 5da:	8c b1       	in	r24, 0x0c	; 12
 5dc:	08 95       	ret

000005de <UARTprocessCommand>:
 */ 

#include "uartDataProcess.h"

void UARTprocessCommand(unsigned char receivedData){
	if (receivedData == 'L') {
 5de:	8c 34       	cpi	r24, 0x4C	; 76
 5e0:	51 f4       	brne	.+20     	; 0x5f6 <UARTprocessCommand+0x18>
		receivedData = USART_Receive();
 5e2:	f9 df       	rcall	.-14     	; 0x5d6 <USART_Receive>
		if (receivedData == '1') {	    // light1 ON
 5e4:	81 33       	cpi	r24, 0x31	; 49
			light1_ON();
 5e6:	11 f4       	brne	.+4      	; 0x5ec <UARTprocessCommand+0xe>
 5e8:	f9 cd       	rjmp	.-1038   	; 0x1dc <light1_ON>
 5ea:	08 95       	ret
		}
		else if (receivedData == '0') {   //light1 OFF
 5ec:	80 33       	cpi	r24, 0x30	; 48
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <UARTprocessCommand+0x14>
			light1_OFF();
 5f0:	3b c0       	rjmp	.+118    	; 0x668 <UARTprocessCommand+0x8a>
 5f2:	00 ce       	rjmp	.-1024   	; 0x1f4 <light1_OFF>
		}
	}
	
	else if (receivedData == 'M') {
 5f4:	08 95       	ret
 5f6:	8d 34       	cpi	r24, 0x4D	; 77
		receivedData = USART_Receive();
 5f8:	49 f4       	brne	.+18     	; 0x60c <UARTprocessCommand+0x2e>
		if (receivedData == '1') {        // light2 ON
 5fa:	ed df       	rcall	.-38     	; 0x5d6 <USART_Receive>
 5fc:	81 33       	cpi	r24, 0x31	; 49
			light2_ON();
 5fe:	11 f4       	brne	.+4      	; 0x604 <UARTprocessCommand+0x26>
 600:	04 ce       	rjmp	.-1016   	; 0x20a <light2_ON>
		}
		else if (receivedData == '0') {       //light2 OFF
 602:	08 95       	ret
			light2_OFF();
 604:	80 33       	cpi	r24, 0x30	; 48
 606:	81 f5       	brne	.+96     	; 0x668 <UARTprocessCommand+0x8a>
		}
	}
	
	else if (receivedData == 'N') {
 608:	0c ce       	rjmp	.-1000   	; 0x222 <light2_OFF>
 60a:	08 95       	ret
		receivedData = USART_Receive();
 60c:	8e 34       	cpi	r24, 0x4E	; 78
		if (receivedData == '1') {      //light3 ON
 60e:	49 f4       	brne	.+18     	; 0x622 <UARTprocessCommand+0x44>
 610:	e2 df       	rcall	.-60     	; 0x5d6 <USART_Receive>
			light3_ON();
 612:	81 33       	cpi	r24, 0x31	; 49
 614:	11 f4       	brne	.+4      	; 0x61a <UARTprocessCommand+0x3c>
		}
		else if (receivedData == '0') {     //light3 OFF
 616:	10 ce       	rjmp	.-992    	; 0x238 <light3_ON>
			light3_OFF();
 618:	08 95       	ret
 61a:	80 33       	cpi	r24, 0x30	; 48
 61c:	29 f5       	brne	.+74     	; 0x668 <UARTprocessCommand+0x8a>
		}
	}
	else if (receivedData == 'F') {
 61e:	18 ce       	rjmp	.-976    	; 0x250 <light3_OFF>
 620:	08 95       	ret
		receivedData = USART_Receive();
 622:	86 34       	cpi	r24, 0x46	; 70
 624:	09 f5       	brne	.+66     	; 0x668 <UARTprocessCommand+0x8a>
		if (receivedData == '1') {     // fan ON
 626:	d7 df       	rcall	.-82     	; 0x5d6 <USART_Receive>
			as1();
 628:	81 33       	cpi	r24, 0x31	; 49
 62a:	39 f4       	brne	.+14     	; 0x63a <UARTprocessCommand+0x5c>
			laststate.lastF1State = 1;
 62c:	6e dd       	rcall	.-1316   	; 0x10a <as1>
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			fan1_speed = 1;
 634:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <fan1_speed>
		}
		else if(receivedData == '2')
 638:	08 95       	ret
		{
			as3();
 63a:	82 33       	cpi	r24, 0x32	; 50
 63c:	39 f4       	brne	.+14     	; 0x64c <UARTprocessCommand+0x6e>
			laststate.lastF1State = 2;
 63e:	86 dd       	rcall	.-1268   	; 0x14c <as3>
 640:	82 e0       	ldi	r24, 0x02	; 2
 642:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			fan1_speed = 2;
 646:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <fan1_speed>
		}
		else if (receivedData == '3') {    
 64a:	08 95       	ret
			as5();
 64c:	83 33       	cpi	r24, 0x33	; 51
 64e:	39 f4       	brne	.+14     	; 0x65e <UARTprocessCommand+0x80>
			laststate.lastF1State = 3;
 650:	9e dd       	rcall	.-1220   	; 0x18e <as5>
 652:	83 e0       	ldi	r24, 0x03	; 3
 654:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <laststate+0x3>
			fan1_speed = 3;
 658:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <fan1_speed>
		}
		else if (receivedData == '0') {       // Fan OFF
 65c:	08 95       	ret
 65e:	80 33       	cpi	r24, 0x30	; 48
			as0();
 660:	19 f4       	brne	.+6      	; 0x668 <UARTprocessCommand+0x8a>
 662:	32 dd       	rcall	.-1436   	; 0xc8 <as0>
			laststate.lastF1State = 0;
 664:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <laststate+0x3>
 668:	08 95       	ret

0000066a <strcmp>:
 66a:	fb 01       	movw	r30, r22
 66c:	dc 01       	movw	r26, r24
 66e:	8d 91       	ld	r24, X+
 670:	01 90       	ld	r0, Z+
 672:	80 19       	sub	r24, r0
 674:	01 10       	cpse	r0, r1
 676:	d9 f3       	breq	.-10     	; 0x66e <strcmp+0x4>
 678:	99 0b       	sbc	r25, r25
 67a:	08 95       	ret

0000067c <_exit>:
 67c:	f8 94       	cli

0000067e <__stop_program>:
 67e:	ff cf       	rjmp	.-2      	; 0x67e <__stop_program>
